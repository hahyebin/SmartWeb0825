<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.koreait.ex14.repository.EmployeeRepository">
	
	
	<!-- 전체 직원 수  -->
	<select id="selectTotalRecordCount" resultType="int">
		SELECT COUNT(*)
	 	  FROM EMPLOYEES
	</select>
	
	
	<!--  조인처리 : 방법1. 각 빈의 목적대로 사용한 다음에 본dto에 조인할 dto를 필드로 설정해서 resultmap으로 만들었다.
	       			 방법2. 공통 필드 뽑아서 새 빈 만들기
	         -->
	
	
	<!-- 조인처리 ==>  결과가 어떤 타입이 아니라 이곳에서 설정한 컬럼, 속성으로.. 
	       + _ -> camel로 하는 방법에서도 사용 가능함 하지만 이번 수업에선 employeeDTO에 departmentDTO(join) 때문에 만든 resultMap이다 -->
	       
	<!--  type은 원래 com.koreait.ex14.domain.Department /  com.koreait.ex14.domain.Employee 지만
	      mybatis-config에서 별명을 주었기 때문에 별명으로 적어도된다.
	 --> 
	<resultMap type="Department" id="DepartmentMap">
		<result column="DEPARTMENT_ID" property="departmentId"/>
		<result column="DEPARTMENT_NAME" property="departmentName"/>
		<result column="MANAGER_ID" property="managerId"/>
		<result column="LOCATION_ID" property="locationId"/>
	</resultMap>	
	<resultMap type="Employee" id="EmployeeMap">
		<result column="EMPLOYEE_ID" property="employeeId" />
		<result column="FIRST_NAME" property="firstName" />
		<result column="LAST_NAME" property="lastName" />
		<result column="EMAIL" property="email" />
		<result column="PHONE_NUMBER" property="phoneNumber" />
		<result column="HIRE_DATE" property="hireDate" />
		<result column="JOB_ID" property="jobId" />
		<result column="SALARY" property="salary" />
		<result column="COMMISSION_PCT" property="commissionPct" />
		<result column="MANAGER_ID" property="managerId" />
		<collection property="department" resultMap="DepartmentMap"></collection>
	</resultMap>
	
	
	<!-- 전체 직원 목록 + department 갖고오기 위한 join -->
	<select id="selectEmployeeList" parameterType="Map" resultMap="EmployeeMap">
		SELECT B.EMPLOYEE_ID, B.FIRST_NAME, B.LAST_NAME, B.EMAIL, B.PHONE_NUMBER, B.HIRE_DATE, B.JOB_ID, B.SALARY, B.COMMISSION_PCT, B.MANAGER_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME, B.LOCATION_ID   
		  FROM ( SELECT ROWNUM AS RN, A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, A.EMAIL, A.PHONE_NUMBER, A.HIRE_DATE, A.JOB_ID, A.SALARY, A.COMMISSION_PCT, A.MANAGER_ID, A.DEPARTMENT_ID, A.DEPARTMENT_NAME, A.LOCATION_ID   
		   		   FROM ( SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, E.EMAIL, E.PHONE_NUMBER, E.HIRE_DATE, E.JOB_ID, E.SALARY, E.COMMISSION_PCT, E.MANAGER_ID, D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID     
		   		   			FROM DEPARTMENTS D, EMPLOYEES E
		   		   		   WHERE  D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID
		   		   		   ORDER BY E.EMPLOYEE_ID ) A) B
	     WHERE B.RN BETWEEN #{beginRecord} AND #{endRecord}
	</select>

	
   <!-- 검색 수 구하기-->
	<select id="selectFindRecordCount" parameterType="Map" resultType="int">
		SELECT COUNT(*) 
	      FROM EMPLOYEES
	     WHERE 1=1
	      <if test="column == 'EMPLOYEE_ID' "> AND ${column} = TRIM( #{query} ) </if>
	      <if test="column == 'FIRST_NAME' "> AND UPPER(${column}) LIKE CONCAT( CONCAT('%', UPPER(TRIM( #{query})) ), '%') </if>
	</select>


   <!--  검색 목록  EmployeeServiceImpl의 map.put -->
  <select id="selectFindList" parameterType="Map" resultMap="EmployeeMap">
    SELECT B.EMPLOYEE_ID, B.FIRST_NAME, B.LAST_NAME, B.EMAIL, B.PHONE_NUMBER, B.HIRE_DATE, B.JOB_ID, B.SALARY, B.COMMISSION_PCT, B.MANAGER_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME, B.LOCATION_ID   
		  FROM ( SELECT ROWNUM AS RN, A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, A.EMAIL, A.PHONE_NUMBER, A.HIRE_DATE, A.JOB_ID, A.SALARY, A.COMMISSION_PCT, A.MANAGER_ID, A.DEPARTMENT_ID, A.DEPARTMENT_NAME, A.LOCATION_ID   
		   		   FROM ( SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, E.EMAIL, E.PHONE_NUMBER, E.HIRE_DATE, E.JOB_ID, E.SALARY, E.COMMISSION_PCT, E.MANAGER_ID, D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID     
		   		   			FROM DEPARTMENTS D, EMPLOYEES E
		   		   		   WHERE  D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID
		   		   		   <if test="column == 'EMPLOYEE_ID'"> AND ${column} =  TRIM( #{query} ) </if>
		   		   		    <if test="column == 'FIRST_NAME'"> AND  UPPER( ${column} ) LIKE  '%'|| UPPER(TRIM(#{query})) ||'%' </if>
		   		   		   ORDER BY E.EMPLOYEE_ID ) A) B
	     WHERE B.RN BETWEEN #{beginRecord} AND #{endRecord}
  </select>
























</mapper>